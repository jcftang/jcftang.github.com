<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scm on Jimmy Tang</title>
    <link>http://jcftang.github.io/categories/scm/</link>
    <description>Recent content in Scm on Jimmy Tang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Apr 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://jcftang.github.io/categories/scm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>prototyping and testing systems</title>
      <link>http://jcftang.github.io/2012/04/09/prototyping-and-testing-systems/</link>
      <pubDate>Mon, 09 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2012/04/09/prototyping-and-testing-systems/</guid>
      <description>&lt;p&gt;One of the issues with with dogfooding your own projects to accelerate
development might be the lack of control and feedback from the
specifications and requirements process. To try and mitigate this
effect, automated testing should be done, that is specification,
feature and behavioural testing. Call it what you will, but the basic
idea is to get a common understanding between the stakeholder, project
owner and developer to understand what is being built and to write
automated tests collectively to ensure that it is being
delivered. This might be a narrow view of the whole area, but I&amp;rsquo;m just
taking what works for me and using it to deliver the project.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;many&lt;/em&gt; specification/feature/behavioural testing tools out
there for almost language that you can think of, so use what works for
you and your team. The testing process not only ensures that the
prototype is working the way that you intend, but it is also a process
where documentation can also be written at the sametime. This
documentation could be used as an initial proposal to the stakeholder
to put forward what you think they want if there are no clear
specifications or requirements in place.&lt;/p&gt;

&lt;p&gt;The interns and I have been working on a small prototype system
for a bigger project and the benefits of writing tests are beginning
to show. It has become apparent to the interns that have been working
on this project that &lt;em&gt;testing is a good thing&lt;/em&gt;, especially if it can
be automated. We&amp;rsquo;re not quite doing TDD or BDD, but it&amp;rsquo;s something
that is in between, we&amp;rsquo;re getting there with a tiered set of tests.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re finding that (probably) about 50% of the time of the team is
spent on refactoring, writing tests and documentation. Testing
combined with the automated builder/tester, the team is writing code
smarter and better instead of just churning out masses of code which
isn&amp;rsquo;t well tested or documented. Given the choice and based on
experience I would prefer to have code that is tested and
documentated, rather than lots of cool half-working and half-tested
features.&lt;/p&gt;

&lt;p&gt;The testing process has been a fantastic way for me to steer the
interns, given how little expertise I have with javascript. The tests
let me learn how the interns have been putting the prototype together,
but it also lets me fuzz up the tests to make sure things are working
and to also write new tests to communicate what I think is needed when
appropriate. We&amp;rsquo;ve somewhat combined minimal QA into the development
and testing process.&lt;/p&gt;

&lt;p&gt;In the end we hope to have a functional prototype system which does
one thing (one set of workflows) well, have lots of documentation,
have tests to back it up and prove that it works. While having an
implementation is great for the potential stakeholder, having
documentation and tests puts us in an even stronger position.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>using continuous integration systems in a team</title>
      <link>http://jcftang.github.io/2011/12/13/using-continuous-integration-systems-in-a-team/</link>
      <pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2011/12/13/using-continuous-integration-systems-in-a-team/</guid>
      <description>&lt;p&gt;Apart from the obvious unit testing code which could be fun trying to
convince a team to use. There are things known as &amp;lsquo;Continuous
Integration&amp;rsquo; processes and servers. The basic idea is to continually
build and test your product automatically and report on successful and
failed builds.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve known about this methodology for long time now but I&amp;rsquo;ve never
bothered to install a CI server since it was always for myself. In the
past a loop in a shell script running make and or make test usually
did the trick. Then I discovered gitbuilder which is just a small set
of scripts for automating the process. Today I have Jenkins installed
and I&amp;rsquo;m somewhat looking at buildbot as well.&lt;/p&gt;

&lt;p&gt;Jenkins appears to be the most responsive and feature rich of the
three systems that I have played with. Buildbot looks lightweight and
scalable.  Though I do miss the git bisect and build on a failure that
gitbuilder provides.&lt;/p&gt;

&lt;p&gt;Having to work with a team that is geographically distributed
sometimes makes idea exchanges, organising events and development
difficult. Any tool that I can get my hands on to encourage
collaborative work and discussion is going to be used.&lt;/p&gt;

&lt;p&gt;Automating the build and test process also means that it is possible
to automate the release process. If all the &amp;lsquo;tests&amp;rsquo; pass then why not
release it? I will need to look at integrating things with fitnesse
next. Other benefits from using a CI process or server means that most
if not all things get automated, this turns into a highly valuable
source of documentation for incoming developers and
engineers. Documentation often gets left to the end instead of being
done on a continual basis as the project progresses.&lt;/p&gt;

&lt;p&gt;Hopefully the CI server won&amp;rsquo;t be used to name and shame developers in
the group, it&amp;rsquo;s there to make sure everything is working as expected.&lt;/p&gt;

&lt;p&gt;Now to convince the team that building early and continually is
actually a good idea! Having somewhat successfully kicked off some
pairing sessions with various team members is good, but being more
flexible and professional about what we are building is what I&amp;rsquo;m
after.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>