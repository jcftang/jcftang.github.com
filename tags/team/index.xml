<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>team on Jimmy Tang</title>
    <link>http://jcftang.github.io/tags/team/</link>
    <description>Recent content in team on Jimmy Tang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Apr 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://jcftang.github.io/tags/team/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>prototyping and testing systems</title>
      <link>http://jcftang.github.io/2012/04/09/prototyping-and-testing-systems/</link>
      <pubDate>Mon, 09 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2012/04/09/prototyping-and-testing-systems/</guid>
      <description>One of the issues with with dogfooding your own projects to accelerate development might be the lack of control and feedback from the specifications and requirements process. To try and mitigate this effect, automated testing should be done, that is specification, feature and behavioural testing. Call it what you will, but the basic idea is to get a common understanding between the stakeholder, project owner and developer to understand what is being built and to write automated tests collectively to ensure that it is being delivered.</description>
    </item>
    
    <item>
      <title>things not to say and to do in a project meeting</title>
      <link>http://jcftang.github.io/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting/</link>
      <pubDate>Thu, 23 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting/</guid>
      <description>Team meetings can be both productive and counter productive as most people find. If they are well structured with a purpose and goal then a lot can be achieved (most of the time).
For explorartory meetings, it&amp;rsquo;s probably okay to have some time set aside for some free and open discussions. Once a goal has been agreed upon, it&amp;rsquo;s probably a good idea to focus on it more and steer the discussion to try and deliver on the goal.</description>
    </item>
    
    <item>
      <title>waterfall or agile methods for delivering a project</title>
      <link>http://jcftang.github.io/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project/</link>
      <pubDate>Wed, 18 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project/</guid>
      <description>Waterfall methods seem to work well for smallish projects that are well defined and well understood. At least from my own experiences of putting things together, but realistically to think of all possible scenarios and to write up all the possible solutions to the problem seems a little bit wacky. To also assume that the requirements process has captured requirements that won&amp;rsquo;t change close the end of the project is also a little unreasonable or unrealistic, this would be especially true on a project that is planned to run for a few years with fairly substantial goals in an ever changing research and development environment.</description>
    </item>
    
    <item>
      <title>using continuous integration systems in a team</title>
      <link>http://jcftang.github.io/2011/12/13/using-continuous-integration-systems-in-a-team/</link>
      <pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2011/12/13/using-continuous-integration-systems-in-a-team/</guid>
      <description>Apart from the obvious unit testing code which could be fun trying to convince a team to use. There are things known as &amp;lsquo;Continuous Integration&amp;rsquo; processes and servers. The basic idea is to continually build and test your product automatically and report on successful and failed builds.
I&amp;rsquo;ve known about this methodology for long time now but I&amp;rsquo;ve never bothered to install a CI server since it was always for myself.</description>
    </item>
    
    <item>
      <title>the joys of working with a team across multiple institutions</title>
      <link>http://jcftang.github.io/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions/</link>
      <pubDate>Wed, 19 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://jcftang.github.io/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions/</guid>
      <description>Having worked in a number of cross institutional projects in the past has lead me to always be weary about how to interact with people. Often it&amp;rsquo;s the lack of co-ordination and communication that seems to be the killer. Parts of the team would seem to not know what other parts of the team are doing and thus either deviate from the master plan or duplicate work.
Gathering requirements for a project is always fun, translating the requirements for a developer to create the end product is even more fun, it often can lead to &amp;lsquo;chinese whispers&amp;rsquo; where things just get miscommunicated and misunderstood.</description>
    </item>
    
  </channel>
</rss>
