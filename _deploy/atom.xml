<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jimmy Tang]]></title>
  <link href="http://jcftang.github.com/atom.xml" rel="self"/>
  <link href="http://jcftang.github.com/"/>
  <updated>2011-10-27T09:39:50+01:00</updated>
  <id>http://jcftang.github.com/</id>
  <author>
    <name><![CDATA[Jimmy Tang]]></name>
    <email><![CDATA[jcftang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up my work Macbook Air]]></title>
    <link href="http://jcftang.github.com/blog/2011/10/21/setting-up-my-work-macbook-air/"/>
    <updated>2011-10-21T08:21:00+01:00</updated>
    <id>http://jcftang.github.com/blog/2011/10/21/setting-up-my-work-macbook-air</id>
    <content type="html"><![CDATA[<p>Everytime when I install, reinstall or setup a mac desktop or laptop I
always tend to install the same set of software that I was. As time
goes on I change what I like to install and what to use. So I&#8217;ve been
keeping notes and logs of that I usually install first.</p>

<p>For my new job I will mainly be writing documents, writing/modify JAVA
code and other bits and pieces that an integrator/architect or release
engineer might want to do.</p>

<p>I will be trying to automate builds, automate tests, assert that the
software must function as expected and so on.</p>

<!--more-->


<p>So down to the list of the things that I have initially installed:</p>

<h2>Binary packages</h2>

<p>Packages that I just grabbed from their respective websites</p>

<ul>
<li>Xcode</li>
<li>JDK - apple developer site</li>
<li>Google Chrome</li>
<li>GitHub Mac</li>
<li>Macports</li>
<li>Eclipse - classic</li>
<li>Perian</li>
<li>iTerm2</li>
</ul>


<h2>Ruby related packages</h2>

<ul>
<li>rvm</li>
<li>showoff</li>
<li>git-scribe</li>
</ul>


<h2>Macports</h2>

<ul>
<li>keychain</li>
<li>git-core</li>
<li>ikiwiki</li>
<li>shiftit</li>
<li>emacs-app</li>
<li>bash-completion</li>
<li>mercurial</li>
<li>mr</li>
<li>ffmpeg</li>
<li>mplayer-devel</li>
<li>dcraw</li>
<li>detox</li>
<li>dos2unix</li>
<li>asciidoc</li>
<li>fossil</li>
<li>zsync</li>
<li>macvim</li>
<li>aria2</li>
<li>openssh</li>
<li>org-mode</li>
<li>tmux</li>
</ul>


<p>The Macports list isn&#8217;t exactly complete, but it&#8217;s pretty close to
what I had explicitly installed. Sadly I tried to install gcc45 and
gcc46 because I wanted to play with some codes which needed a fortran
compiler, this failed to install due to some bootstrapping issue of
the fortran compiler during the build.</p>

<p>I&#8217;ve yet to install Haskell and some of the related tools which are
pretty handy for a lazy user. There is also the need for installing
Office for OSX. I wish I could just use plain text.</p>

<p>At somepoint I should grab my previous lists and see what I have
added/removed to my toolbox over the years. So far Lion hasn&#8217;t been
too bad, but I have yet to develop anything or seriously tried to do
anything too technical on this system so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The joys of working with a team across multiple institutions]]></title>
    <link href="http://jcftang.github.com/blog/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions/"/>
    <updated>2011-10-19T21:34:00+01:00</updated>
    <id>http://jcftang.github.com/blog/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions</id>
    <content type="html"><![CDATA[<p>Having worked in a number of cross institutional projects in the past
has lead me to always be weary about how to interact with
people. Often it&#8217;s the lack of co-ordination and communication that
seems to be the killer. Parts of the team would seem to not know what
other parts of the team are doing and thus either deviate from the
master plan or duplicate work.</p>

<!--more-->


<p>Gathering requirements for a project is always fun, translating the
requirements for a developer to create the end product is even more
fun, it often can lead to &#8216;chinese whispers&#8217; where things just get
miscommunicated and misunderstood.</p>

<p>Agreeing on collaborating in a sense that everyone should talk and
making sure everyone is on the same page always seems to be a touchy
subject, everyone is an expert. So many things can be resolved by just
bridging the communication gap. I will be finding this out very soon
in how I manage expectations for the latest project that I am working
on.</p>

<p>Perhaps I should change my approach vector in getting everyone to
communicate their concerns and specifications to deliver the product
that we want to create. The worst thing we can do is spend half our
time developing something based on an early spec only to find out that
the goal posts have changed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feeling Disconnected From Modern Software Development Tools]]></title>
    <link href="http://jcftang.github.com/blog/2011/10/13/feeling-disconnected-from-modern-software-development-tools/"/>
    <updated>2011-10-13T01:09:00+01:00</updated>
    <id>http://jcftang.github.com/blog/2011/10/13/feeling-disconnected-from-modern-software-development-tools</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently started a new role as being a senior software engineer
for an Irish National Project and I have had to refresh my OOP skills
with JAVA.</p>

<p>Naturally I gravitated to free and opensource tools to refresh
myself. This lead me to install Eclipse, which is the the EMACS of the
modern world. I&#8217;ve never had much luck with IDE&#8217;s nor have I liked
using IDE&#8217;s much in the past since I mainly dealt with codes written
in C, Fortran and if I am lucky Perl or C++. This is because my
background is in Applied Mathematics, Phyiscs and High Performance
Computing and the codes in this general area are just plain old and
written by scientists primarily and not engineers. What this means is
that almost every numerical code out there that I have had the build,
hack at, develop for is setup differently with its own build system,
its own way of laying out the code base, code that depends on specific
compiler bugs. The list of fun things just goes on.</p>

<!--more-->


<p>Having to deal with old codes written in &#8220;old&#8221; languages really makes
the user or system administrator really learn about the build system,
the compliers that are needed, the environment and the dependancy hell
that they get into at times. Because of these experiences, I&#8217;ve yet
again found that JAVA provides lots and lots of support and protection
for the developer. Other nice things that modern languages like JAVA
provide is really the tools that standardise the workflow. This seems
to have had a huge impact on the quality of systems that are produced.</p>

<p>However I really do appreciate the whole TDD concept, but more
importantly the whole concept of Acceptance Testing Driven Development
and Behavioural Driven Development concepts. The features of modern
IDE&#8217;s hinting users scares me to think that fresh graduates from
university might be too reliant on these modern systems that do too
many things for the developer. It does however give fast feedback to
the developer so that they can learn the language much more easily.</p>

<p>Maybe I just feel like a dinosaur for liking vi/vim or emacs for
writing C programs and shell scripts and liking it. I really do feel
disconnected from what modern developers are doing these
days. Developers these days just have it far easier if JAVA or an
equivalent modern language is used with the appropriate tool. It&#8217;s
just down to a communication problem of creating the right thing.</p>

<p>By the way this is the first post!</p>
]]></content>
  </entry>
  
</feed>
