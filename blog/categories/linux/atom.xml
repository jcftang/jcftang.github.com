<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Jimmy Tang]]></title>
  <link href="http://jcftang.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jcftang.github.com/"/>
  <updated>2012-02-19T12:24:31+00:00</updated>
  <id>http://jcftang.github.com/</id>
  <author>
    <name><![CDATA[Jimmy Tang]]></name>
    <email><![CDATA[jcftang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Why Linux isn't the only platform to target when building applications]]></title>
<link href="http://jcftang.github.com/blog/2012/02/16/why-linux-isnt-the-only-platform-to-target-when-building-applications/"/>
<updated>2012-02-16T09:33:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/02/16/why-linux-isnt-the-only-platform-to-target-when-building-applications</id>

      <content type="html"><![CDATA[<p>Why would one want to target other platforms when building applications
on the server side?</p>

<p>This came out of a conversation with the ex-CTO of Creme software (he
is also a friend of mine), the conversation started out with why I
like to use Macs and OSX as my laptop or workstation. I've been a long
time Linux user of pretty much most of the major distributions ranging
from RHEL, Debian/Ubuntu, Gentoo, ArchLinux as well as a number of
other derivatives, not to mention other systems like the BSD's which I
have a soft spot for.</p>

<p>I interchange the terms Linux and Distros quite a bit in this post.</p>

<p>Some of the things that didn't like with the Linux's were that not all
my hardware would be supported all the time, the distro's sometimes
think that it's a good idea to completely change how lowlevel systems
work in favour of <em>what's hot right now</em>, sometimes the lack of long
term support for security updates (not package updates to fix security
problems) does make it more difficult to plan and deploy. The
perceived flexibility sometimes causes headaches with migration plans
and maintanence.</p>

<p>Of course there are things that I like, the access to the source code
and packaging to fix and redeploy packages. The stability and
reliability that can be achieved is attractive if everything is
automated and planned out (though too much automation can be bad too).</p>

<p>To get back to the original point of why you wouldn't want to target
Linux specifically when building applications? Unless you have a
strong motivating reason to write code that <em>specifically</em> requires a
feature of Linux (or any other operating system), then you really
ought to be writing code that adheres to at least some POSIX or cross
platform standard, and pick libraries that are known to have good
cross platform compatibility. There is nothing to gain from writing
platform specific codes in the long run, the platform might hide
issues from the developer if it is too clever. Linux or more
specifically the distros might change various behaviour of the
underlying system, and if your code is tied down to particular
features of the underlying system then you will have lots of fun
migrating.</p>

<p>It's just bad practice to rely on system specific behaviour which
isn't portable (or maintainable) going forward in a project. To
mitigate some of this, one would want to at least try to use a
continuous build systems such as <em>gitbuilder</em>, <em>buildbot</em> or <em>jenkins</em>
on a bunch of <strong>different</strong> architectures and platforms. This will
reveal portability issues and more often than not, subtle bugs in your
code which you probably didn't see as a result of your development
system being too smart for you!</p>

<p>There isn't much of an excuse not to do continuous builds and testings
across different Linux, BSD and Solaris distributions these
days. Diskspace and compute power is cheap, there are free and
opensource virtualisation technologies out there to provide you with a
means to run different distributions for testing on a single
machine. The problem will be the upfront manpower needed to setup such
a system.</p>

<p>In the long run targetting at least two platforms will make your code
base far more portable and hopefully more maintainable as you will end
up making sure you write code once that runs on many systems with
minimal changes needed when a new platform arises.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/02/16/why-linux-isnt-the-only-platform-to-target-when-building-applications/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[cports for building applications and libraries for HPC systems &rarr;]]></title>
<link href="http://thammuz.tchpc.tcd.ie/mirrors/cports/releases/"/>
<updated>2012-02-12T17:59:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/02/12/cports-for-building-applications-and-libraries-for-hpc-systems</id>

      <content type="html"><![CDATA[<p>I've talked about <em>cports</em> in the past, it's basically a collection of
<em>makefiles</em> which mostly automates the process of downloading,
configuring, building and installing applications and libraries for
High Performance Computing systems that use environment-modules.</p>

<p>One of the key-features that <em>cports</em> offers is the automated
modulefile generation, and the fact that the <em>makefiles</em> acts as
documentation to how software is configured, built and installed. It's
currently being used on the clusters at my work place, it has been a
boost to the productivity of the systems admin team. It's a nice
alternative to trying to create RPM's or DEB's (pick your custom
package manager of choice here), as <em>makefiles</em> tend to be a little
more flexible than traditional package managers.</p>

<p>One main drawback of the <em>cports</em> system right now is the lack of good
dependancy management and checking, it is all currently up to the
packager to resolve these dependancy issues. It's also <em>cports</em>
strongest point that there is no dependancy management, as the
packager can build many unique trees of packages.</p>

<p>For example, we have Tahoe-LAFS in the following sample makefile</p>

<p>```
include ../../../mk/gnu.pre.mk</p>

<p>DISTNAME=   allmydata-tahoe
VERSION=    1.9.0-SUMO
CATEGORIES= system
HOMEPAGE=   http://tahoe-lafs.org/
MASTER_SITES=   http://tahoe-lafs.org/source/tahoe-lafs/releases/
MAINTAINER= jtang@tchpc.tcd.ie
HAS_CONFIGURE=  no
DISTFILES = $(DISTNAME)-$(VERSION).tar.bz2</p>

<p>DEPENDS="Python/2.6.5 --build-env Python/2.6.5 --run-env"
DEPENDS+="openssl/0.9.8o --lib --build-env"
DEPENDS+="gmp/4.3.2 --lib --build-env"</p>

<p>DESCRIPTION=    "Tahoe-LAFS (Least Authority File System) is a Free Software/Open Source"
DESCRIPTION+=    "decentralized data store. It distributes your filesystem across multiple"
DESCRIPTION+=    "servers, and even if some of the servers fail or are taken over by"
DESCRIPTION+=    "an attacker, the entire filesystem continues to work correctly and to"
DESCRIPTION+=    "preserve your privacy and security."</p>

<p>CONFIGURE_ARGS +=</p>

<p>MODULEFILE_LINES+=      PYTHONPATH
MODULEFILE_CMD_PYTHONPATH?= \</p>

<pre><code>    $(ECHO) "prepend-path   PYTHONPATH $(PROGRAM_PREFIX)/lib/python2.6/site-packages";
</code></pre>

<p>do-build:</p>

<pre><code>$(MODULE_ADD) $(BUILD_DEPENDS); \
cd $(WRKSRC); \
</code></pre>

<p>do-install:</p>

<pre><code>$(MODULE_ADD) $(BUILD_DEPENDS); \
cd $(WRKSRC); \
$(MKDIR) $(PROGRAM_PREFIX) ;\
tar -cpf - . | (cd $(PROGRAM_PREFIX)/ &amp;&amp; tar -xpf - ) ;\
cd $(PROGRAM_PREFIX) ;\
cp -a tahoe-deps ../ ;\
python setup.py build ;
</code></pre>

<p>do-test:</p>

<pre><code>$(MODULE_ADD) $(RUN_DEPENDS) $(DISTNAME)/$(VERSION)$(EXTRAVERSION)$(COMPILER_TAG) ; \
cd $(WRKSRC); \
python setup.py test
</code></pre>

<p>include ../../../mk/gnu.post.mk
```</p>

<p>In this example, as Tahoe-LAFS (upstream project) gets updated, the
cports packager just needs to copy this makefile to a new directory,
update the version numbers, then do a <em>make install</em>. This assumes
that the dependancies haven't changed much, if they have it is trivial
to update the dependancies. The above example generates a modulefile
similar to like this,</p>

<p>```</p>

<h1>%Module1.0</h1>

<p>module-whatis "allmydata-tahoe version 1.9.0-SUMO (compiled with a gnu compiler)"
conflict allmydata-tahoe
prepend-path   PYTHONPATH /home/support/apps/cports/rhel-5.x86_64/gnu/allmydata-tahoe/1.9.0-SUMO/lib
/python2.6/site-packages
prepend-path PATH /home/support/apps/cports/rhel-5.x86_64/gnu/allmydata-tahoe/1.9.0-SUMO/bin
module add Python/2.6.5-gnu
proc ModulesHelp { } {
puts stderr "Tahoe-LAFS (Least Authority File System) is a Free Software/Open Source"
puts stderr "decentralized data store. It distributes your filesystem across multiple"
puts stderr "servers, and even if some of the servers fail or are taken over by"
puts stderr "an attacker, the entire filesystem continues to work correctly and to"
puts stderr "preserve your privacy and security."
puts stderr {build depends: gmp/4.3.2-gnu openssl/0.9.8o-gnu Python/2.6.5-gnu}
puts stderr {run depends: Python/2.6.5-gnu}
puts stderr {module depends: gmp/4.3.2 openssl/0.9.8o Python/2.6.5}
puts stderr {link depends: gmp/4.3.2-gnu openssl/0.9.8o-gnu}
}
prepend-path   PYTHONPATH /home/support/apps/cports/rhel-5.x86_64/gnu/allmydata-tahoe/1.9.0-SUMO/lib
/python2.6/site-packages
```</p>

<p>Once the package has been built and tested on a development system, we
can take the package and replicate the installation in fairly
automated fashion. This type of scripting and automation means that
the clusters that we run in work have consistent installations of
applications.</p>

<p>Having consistent installs means that the end-user needs to learn less
about the naming conventions. This in turn reduces the confusion and
documentation that is needed for the end user.</p>

<p>Sadly, I don't get to play with <em>cports</em> as much as I used to, since I
do not administrate High Performance Computing systems anymore in my
new role at my current work place. It is just a hobby to develop this
build system, I plan on automating more testing of the <em>cports</em> system
when I get a chance. We currently have <em>jenkins</em> and <em>gitbuilder</em>
running on select machines in work to continually build and test
specific packages to find regressions and broken download links.</p>

<p><em>cports</em> isn't quite ready for general public usage, but if you are a
clued in systems administrator at a High Performance Computing
facility and use environment-module then <em>cports</em> is just about
usable. This is of course if you are willing to look at the sample
packages and write <em>makefiles</em>.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/02/12/cports-for-building-applications-and-libraries-for-hpc-systems/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Red Hat Enterprise Linux Life Cycle Extended to Ten Years &rarr;]]></title>
<link href="https://www.redhat.com/archives/rhelv5-announce/2012-January/msg00000.html"/>
<updated>2012-02-09T08:16:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/02/09/red-hat-enterprise-linux-life-cycle-extended-to-ten-years</id>

      <content type="html"><![CDATA[<p>It's all over the internet that RHEL6 and newer releases will have a
life cycle of 10yrs. This is pretty good news for projects that are
deploying systems that have a lifetime of 5yrs or more. Namely Digital
Preservation projects, not having to worry about migration between
point releases of an operating system platform reduces time and costs.</p>

<p>I'm now more likely to target the systems we develop in work towards a
RHEL system (or a RHEL like clone).</p>

<p>Another side effect of this long term support is that it will probably
make life easier for those who have lots of virtual machines running
RHEL. Longer support means less issues with continually migrating
between point releases. From a practical point of view of a
operational sysadmin, this is great. From a developers point of view,
it's also not bad either, software written now (assuming the
requirements haven't changed) will probably work long into the future.</p>

<p>Note: I am not a RHEL (Fedora) fanboy, I used to sysadmin a few
hundred RHEL (scientific linux) based systems. Before that, I used to
sysadmin a few hundred Debian based systems.<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/02/09/red-hat-enterprise-linux-life-cycle-extended-to-ten-years/">&infin; Permalink</a></p></p>
]]></content>
    </entry>
  
</feed>

