<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: team | Jimmy Tang]]></title>
  <link href="http://jcftang.github.com/blog/categories/team/atom.xml" rel="self"/>
  <link href="http://jcftang.github.com/"/>
  <updated>2012-04-01T11:47:19+01:00</updated>
  <id>http://jcftang.github.com/</id>
  <author>
    <name><![CDATA[Jimmy Tang]]></name>
    <email><![CDATA[jcftang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Gitbuilder aggregator &rarr;]]></title>
<link href="https://github.com/jcftang/gitbuilder/tree/develop/contrib/gitbuilder-ajax"/>
<updated>2012-04-01T11:05:00+01:00</updated>
<id>http://jcftang.github.com/blog/2012/04/01/gitbuilder-aggregator</id>

      <content type="html"><![CDATA[<p>We use git and <a href="https://github.com/apenwarr/gitbuilder">gitbuilder</a> in
work for a large number of projects, we also try and test things as
much as we can. I first noticed that someone had written an aggregator
for gitbuilder at <a href="http://ceph.newdream.net/gitbuilder.cgi">ceph
gitbuilders</a>, this seemed
like a great idea (and it is) except the aggregator at the time didn't
quite work very fast and needed some ajax magic.</p>

<p>I had asked for a copy of the aggregator script from the ceph
developers, this was really just a perl hack as they said, but it
works. Since we had some students doing an internship here to learn
new things, I got one of the interns to write an ajax'd up version of
the aggregator.</p>

<p>After a few weeks worth of usage and minor changes, it's a bit more
ready to share with everyone, the ajax'd up version of the aggregator
can be found at my
<a href="https://github.com/jcftang/gitbuilder/tree/develop/contrib/gitbuilder-ajax">github</a>
account in the develop branch. For fun I updated the main gitbuilder
cgi scripts to use twitter bootstrap and add a link to the errcache
file that gitbuilder generates.</p>

<p>We found that with large builds the logs would just swamp out the
errors and warnings and having access to the errcache helped a lot in
narrowing down where to look for problems, hence the linking to the
errcache.</p>

<p>At somepoint it might be worth re-implementing the gitbuilder scripts
in a single language in a generic way such that it works with other
DVCS's that have the bisect feature.<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/04/01/gitbuilder-aggregator/">&infin; Permalink</a></p></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Dogfooding your own project to accelerate development]]></title>
<link href="http://jcftang.github.com/blog/2012/03/15/dogfooding-your-own-project-to-accelerate-development/"/>
<updated>2012-03-15T19:31:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/03/15/dogfooding-your-own-project-to-accelerate-development</id>

      <content type="html"><![CDATA[<p>Should you dogfood your own project that you are developing? The
answer is probably yes, especially if you have no clear cut
requirements from the stakeholder in a project with a greenfield for
development. There is a lot to be said about having a working
implementation that can be presented and refined.</p>

<p>Sometimes the project that you are working on won't have clear
requirements for implementation, so you should probably take basic
assumed cases and run with it. Starting early to see what works and
what doesn't work is a pragmatic approach which the waterfall crowd
might not like. But hey, an implementation speaks for itself.</p>

<p>If you don't use what you develop, then it is very hard to relate to
the customer/end-user in the long run. On the note of dogfooding your
own work, sometimes best-practice might cost too much in terms of time
and money, sometimes good-enough practice might just be enough to
deliver a functioning product.</p>

<p>Accelerating development by dogfooding your own work and using
good-enough practices should increase throughput of development, but
not necessarily quality. Again in a greenfield project where there
aren't many requirements due to the schedule, it's worth taking this
approach until hard requirements get delivered.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/03/15/dogfooding-your-own-project-to-accelerate-development/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Planet DRI - a news aggregator for digital humanities and digital preservation projects in Ireland &rarr;]]></title>
<link href="http://www.tchpc.tcd.ie/dri-planet/"/>
<updated>2012-03-04T18:38:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/03/04/planet-dri-a-news-aggregator-for-digital-humanities-and-digital-preservation-projects-in-ireland</id>

      <content type="html"><![CDATA[<p>This is just a temporary solution till something better or more
appropriate comes along. It's just an ikiwiki news aggregator for
websites and projects which are related to Digital Preservation,
Digitial Humanities and other related bits and pieces.</p>

<p>It was pretty much setup for myself to keep up to date with all the
latest happenings. I found myself falling behind in being
knowledgeable in all things related to <em>Digital Repositories Ireland</em>.</p>

<p>I hope that my team mates will appreciate and contribute to this
little effort. I don't think I've ever come across a Digital
Humanities and Digital Preservation aggregator before.<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/03/04/planet-dri-a-news-aggregator-for-digital-humanities-and-digital-preservation-projects-in-ireland/">&infin; Permalink</a></p></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Things not to say and to do in a project meeting]]></title>
<link href="http://jcftang.github.com/blog/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting/"/>
<updated>2012-02-23T08:13:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting</id>

      <content type="html"><![CDATA[<p>Team meetings can be both productive and counter productive as most
people find. If they are well structured with a purpose and goal then
a lot can be achieved (most of the time).</p>

<p>For explorartory meetings, it's probably okay to have some time set
aside for some free and open discussions. Once a goal has been agreed
upon, it's probably a good idea to focus on it more and steer the
discussion to try and deliver on the goal. Having open ended
discussions with no set goals sometimes is discouraging and sometimes
a waste of time.</p>

<p>To the point, I wanted to discuss some things not to say and do in a
meeting which might cause a collapse in communications, these are just
some things that I have noticed in the last few months worth of
meetings and are based on my own experiences,</p>

<ul>
<li>Don't assume you know everything, there will always be someone
smarter than you. There's nothing wrong with being an expert in your
own area, but there are times where you just need to trust others to
deliver.</li>
<li>Don't pick on other team members for (possibly) not delivering, this
is hugely demoralising. It's better to ask why, and if possible does
that team member or members need help to deliver.</li>
<li>In real life, does anyone really use waterfall methods to deliver a
project?</li>
<li>Don't try and do micro-management if you are clearly middle or even
senior management, but at least describe tasks in the same language
as the stakeholder and developer so that things don't get lost in
translation.</li>
<li>Do have a plan if the series of meetings are to last a few months if
there are long term goals to be achieved. If it's not a plan, then
at least have a list of todo, work in progress and done tasks.</li>
<li>Don't assign tasks without deadlines (realistic ones).</li>
<li>Don't assume you are on the same page in discussions unless you are
confident that everyone at the meeting has common language and
understands what is being discussed. People come and go, so you just
have to be aware.</li>
</ul>


<p>Most if not all of the above list of things is common sense, there
isn't anything too special that you need to do to succeed at
communicating.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Waterfall or Agile methods for delivering a project]]></title>
<link href="http://jcftang.github.com/blog/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project/"/>
<updated>2012-01-18T08:41:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project</id>

      <content type="html"><![CDATA[<p>Waterfall methods seem to work well for smallish projects that are
well defined and well understood. At least from my own experiences of
putting things together, but realistically to think of all possible
scenarios and to write up all the possible solutions to the problem
seems a little bit wacky. To also assume that the requirements process
has captured requirements that won't change close the end of the
project is also a little unreasonable or unrealistic, this would be
especially true on a project that is planned to run for a few years
with fairly substantial goals in an ever changing research and
development environment.</p>

<p>Waterfall styled methods just cause problems with planning and
adjusting the process to the needs of the stakeholder (no matter what
the stakeholder thinks they need, they will change their mind). Again
this is especially true for long running projects.</p>

<p>So why not use agile methods? Simply because there is little or no
plan and it requires real collaboration, delegation of tasks and
trust to work towards a common goal. People get afraid perhaps?</p>

<p>The trick is communication and trying to introduce agile methods
slowly and steadily into the system. I've been slowly introducing the
idea of pairings, sprints and elements of scrum with kanban (yes,
that's lots of buzz words there already). Getting people to agree to
talk is probably the hardest thing to do, and it's even harder to try
and get everyone on the same page without ego's getting in the way.</p>

<p>It's paying off a little for now, the team members are beginning to at
least talk and exchange ideas. In my world that is a huge step
already. Next is it try getting things done by prioritising tasks and
resources.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
</feed>

