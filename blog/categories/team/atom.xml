<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: team | Jimmy Tang]]></title>
  <link href="http://jcftang.github.com/blog/categories/team/atom.xml" rel="self"/>
  <link href="http://jcftang.github.com/"/>
  <updated>2012-03-05T19:41:08+00:00</updated>
  <id>http://jcftang.github.com/</id>
  <author>
    <name><![CDATA[Jimmy Tang]]></name>
    <email><![CDATA[jcftang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Planet DRI - a news aggregator for digital humanities and digital preservation projects in Ireland &rarr;]]></title>
<link href="http://www.tchpc.tcd.ie/dri-planet/"/>
<updated>2012-03-04T18:38:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/03/04/planet-dri-a-news-aggregator-for-digital-humanities-and-digital-preservation-projects-in-ireland</id>

      <content type="html"><![CDATA[<p>This is just a temporary solution till something better or more
appropriate comes along. It's just an ikiwiki news aggregator for
websites and projects which are related to Digital Preservation,
Digitial Humanities and other related bits and pieces.</p>

<p>It was pretty much setup for myself to keep up to date with all the
latest happenings. I found myself falling behind in being
knowledgeable in all things related to <em>Digital Repositories Ireland</em>.</p>

<p>I hope that my team mates will appreciate and contribute to this
little effort. I don't think I've ever come across a Digital
Humanities and Digital Preservation aggregator before.<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/03/04/planet-dri-a-news-aggregator-for-digital-humanities-and-digital-preservation-projects-in-ireland/">&infin; Permalink</a></p></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Things not to say and to do in a project meeting]]></title>
<link href="http://jcftang.github.com/blog/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting/"/>
<updated>2012-02-23T08:13:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting</id>

      <content type="html"><![CDATA[<p>Team meetings can be both productive and counter productive as most
people find. If they are well structured with a purpose and goal then
a lot can be achieved (most of the time).</p>

<p>For explorartory meetings, it's probably okay to have some time set
aside for some free and open discussions. Once a goal has been agreed
upon, it's probably a good idea to focus on it more and steer the
discussion to try and deliver on the goal. Having open ended
discussions with no set goals sometimes is discouraging and sometimes
a waste of time.</p>

<p>To the point, I wanted to discuss some things not to say and do in a
meeting which might cause a collapse in communications, these are just
some things that I have noticed in the last few months worth of
meetings and are based on my own experiences,</p>

<ul>
<li>Don't assume you know everything, there will always be someone
smarter than you. There's nothing wrong with being an expert in your
own area, but there are times where you just need to trust others to
deliver.</li>
<li>Don't pick on other team members for (possibly) not delivering, this
is hugely demoralising. It's better to ask why, and if possible does
that team member or members need help to deliver.</li>
<li>In real life, does anyone really use waterfall methods to deliver a
project?</li>
<li>Don't try and do micro-management if you are clearly middle or even
senior management, but at least describe tasks in the same language
as the stakeholder and developer so that things don't get lost in
translation.</li>
<li>Do have a plan if the series of meetings are to last a few months if
there are long term goals to be achieved. If it's not a plan, then
at least have a list of todo, work in progress and done tasks.</li>
<li>Don't assign tasks without deadlines (realistic ones).</li>
<li>Don't assume you are on the same page in discussions unless you are
confident that everyone at the meeting has common language and
understands what is being discussed. People come and go, so you just
have to be aware.</li>
</ul>


<p>Most if not all of the above list of things is common sense, there
isn't anything too special that you need to do to succeed at
communicating.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/02/23/things-not-to-say-and-to-do-in-a-project-meeting/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Waterfall or Agile methods for delivering a project]]></title>
<link href="http://jcftang.github.com/blog/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project/"/>
<updated>2012-01-18T08:41:00+00:00</updated>
<id>http://jcftang.github.com/blog/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project</id>

      <content type="html"><![CDATA[<p>Waterfall methods seem to work well for smallish projects that are
well defined and well understood. At least from my own experiences of
putting things together, but realistically to think of all possible
scenarios and to write up all the possible solutions to the problem
seems a little bit wacky. To also assume that the requirements process
has captured requirements that won't change close the end of the
project is also a little unreasonable or unrealistic, this would be
especially true on a project that is planned to run for a few years
with fairly substantial goals in an ever changing research and
development environment.</p>

<p>Waterfall styled methods just cause problems with planning and
adjusting the process to the needs of the stakeholder (no matter what
the stakeholder thinks they need, they will change their mind). Again
this is especially true for long running projects.</p>

<p>So why not use agile methods? Simply because there is little or no
plan and it requires real collaboration, delegation of tasks and
trust to work towards a common goal. People get afraid perhaps?</p>

<p>The trick is communication and trying to introduce agile methods
slowly and steadily into the system. I've been slowly introducing the
idea of pairings, sprints and elements of scrum with kanban (yes,
that's lots of buzz words there already). Getting people to agree to
talk is probably the hardest thing to do, and it's even harder to try
and get everyone on the same page without ego's getting in the way.</p>

<p>It's paying off a little for now, the team members are beginning to at
least talk and exchange ideas. In my world that is a huge step
already. Next is it try getting things done by prioritising tasks and
resources.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2012/01/18/waterfall-or-agile-methods-for-delivering-a-project/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Using continuous integration systems in a team]]></title>
<link href="http://jcftang.github.com/blog/2011/12/13/using-continuous-integration-systems-in-a-team/"/>
<updated>2011-12-13T07:37:00+00:00</updated>
<id>http://jcftang.github.com/blog/2011/12/13/using-continuous-integration-systems-in-a-team</id>

      <content type="html"><![CDATA[<p>Apart from the obvious unit testing code which could be fun trying to
convince a team to use. There are things known as 'Continuous
Integration' processes and servers. The basic idea is to continually
build and test your product automatically and report on successful and
failed builds.</p>

<p>I've known about this methodology for long time now but I've never
bothered to install a CI server since it was always for myself. In the
past a loop in a shell script running make and or make test usually
did the trick. Then I discovered gitbuilder which is just a small set
of scripts for automating the process. Today I have Jenkins installed
and I'm somewhat looking at buildbot as well.</p>

<p>Jenkins appears to be the most responsive and feature rich of the
three systems that I have played with. Buildbot looks lightweight and
scalable.  Though I do miss the git bisect and build on a failure that
gitbuilder provides.</p>

<p>Having to work with a team that is geographically distributed
sometimes makes idea exchanges, organising events and development
difficult. Any tool that I can get my hands on to encourage
collaborative work and discussion is going to be used.</p>

<p>Automating the build and test process also means that it is possible
to automate the release process. If all the 'tests' pass then why not
release it? I will need to look at integrating things with fitnesse
next. Other benefits from using a CI process or server means that most
if not all things get automated, this turns into a highly valuable
source of documentation for incoming developers and
engineers. Documentation often gets left to the end instead of being
done on a continual basis as the project progresses.</p>

<p>Hopefully the CI server won't be used to name and shame developers in
the group, it's there to make sure everything is working as expected.</p>

<p>Now to convince the team that building early and continually is
actually a good idea! Having somewhat successfully kicked off some
pairing sessions with various team members is good, but being more
flexible and professional about what we are building is what I'm
after.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2011/12/13/using-continuous-integration-systems-in-a-team/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[The joys of working with a team across multiple institutions]]></title>
<link href="http://jcftang.github.com/blog/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions/"/>
<updated>2011-10-19T21:34:00+01:00</updated>
<id>http://jcftang.github.com/blog/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions</id>

      <content type="html"><![CDATA[<p>Having worked in a number of cross institutional projects in the past
has lead me to always be weary about how to interact with
people. Often it's the lack of co-ordination and communication that
seems to be the killer. Parts of the team would seem to not know what
other parts of the team are doing and thus either deviate from the
master plan or duplicate work.</p>

<p>Gathering requirements for a project is always fun, translating the
requirements for a developer to create the end product is even more
fun, it often can lead to 'chinese whispers' where things just get
miscommunicated and misunderstood.</p>

<p>Agreeing on collaborating in a sense that everyone should talk and
making sure everyone is on the same page always seems to be a touchy
subject, everyone is an expert. So many things can be resolved by just
bridging the communication gap. I will be finding this out very soon
in how I manage expectations for the latest project that I am working
on.</p>

<p>Perhaps I should change my approach vector in getting everyone to
communicate their concerns and specifications to deliver the product
that we want to create. The worst thing we can do is spend half our
time developing something based on an early spec only to find out that
the goal posts have changed.</p>

<p><a rel="bookmark" href="http://jcftang.github.com/blog/2011/10/19/the-joys-of-working-with-a-team-across-multiple-institutions/">&infin; Permalink</a></p>

]]></content>
    </entry>
  
</feed>

